{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://sua-api-aqui.com/users'; // Substitua pela sua URL real da API\n  }\n  // Método para buscar todos os usuários\n  getUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  // Método para buscar um usuário pelo ID\n  getUserById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Método para criar um novo usuário\n  createUser(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  // Método para atualizar um usuário\n  updateUser(id, user) {\n    return this.http.put(`${this.apiUrl}/${id}`, user);\n  }\n  // Método para deletar um usuário\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UserService","constructor","http","apiUrl","getUsers","get","getUserById","id","createUser","user","post","updateUser","put","deleteUser","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/jeff/Documents/GitHub/Amor_Saude/src/app/modules/user/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.model'; // Ajuste o caminho de acordo com a localização da sua interface User\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl = 'http://sua-api-aqui.com/users'; // Substitua pela sua URL real da API\n\n  constructor(private http: HttpClient) {}\n\n  // Método para buscar todos os usuários\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.apiUrl);\n  }\n\n  // Método para buscar um usuário pelo ID\n  getUserById(id: string): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/${id}`);\n  }\n\n  // Método para criar um novo usuário\n  createUser(user: User): Observable<User> {\n    return this.http.post<User>(this.apiUrl, user);\n  }\n\n  // Método para atualizar um usuário\n  updateUser(id: string, user: User): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/${id}`, user);\n  }\n\n  // Método para deletar um usuário\n  deleteUser(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,+BAA+B,CAAC,CAAC;EAEX;EAEvC;EACAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC;EAC3C;EAEA;EACAG,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,EAAE,CAAC;EACpD;EAEA;EACAC,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,IAAI,CAACP,MAAM,EAAEM,IAAI,CAAC;EAChD;EAEA;EACAE,UAAUA,CAACJ,EAAU,EAAEE,IAAU;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAO,GAAG,IAAI,CAACT,MAAM,IAAII,EAAE,EAAE,EAAEE,IAAI,CAAC;EAC1D;EAEA;EACAI,UAAUA,CAACN,EAAU;IACnB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAC,GAAG,IAAI,CAACX,MAAM,IAAII,EAAE,EAAE,CAAC;EACjD;EAAC,QAAAQ,CAAA,G;qBA5BUf,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}