{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/user.service\";\nimport * as i3 from \"@angular/router\";\nfunction EditComponent_form_0_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" O nome \\u00E9 obrigat\\u00F3rio. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditComponent_form_0_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" O e-mail \\u00E9 obrigat\\u00F3rio. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditComponent_form_0_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Insira um e-mail v\\u00E1lido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 1);\n    i0.ɵɵlistener(\"ngSubmit\", function EditComponent_form_0_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"mat-form-field\", 2)(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Nome\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 3);\n    i0.ɵɵtemplate(5, EditComponent_form_0_mat_error_5_Template, 2, 0, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-form-field\", 2)(7, \"mat-label\");\n    i0.ɵɵtext(8, \"E-mail\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"input\", 5);\n    i0.ɵɵtemplate(10, EditComponent_form_0_mat_error_10_Template, 2, 0, \"mat-error\", 4);\n    i0.ɵɵtemplate(11, EditComponent_form_0_mat_error_11_Template, 2, 0, \"mat-error\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 6);\n    i0.ɵɵtext(13, \"Salvar\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.userForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.userForm.get(\"name\").errors == null ? null : ctx_r0.userForm.get(\"name\").errors[\"required\"]);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.userForm.get(\"email\").errors == null ? null : ctx_r0.userForm.get(\"email\").errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.userForm.get(\"email\").errors == null ? null : ctx_r0.userForm.get(\"email\").errors[\"email\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.userForm.invalid);\n  }\n}\nexport class EditComponent {\n  constructor(fb, userService, route, router) {\n    this.fb = fb;\n    this.userService = userService;\n    this.route = route;\n    this.router = router;\n    this.userId = null;\n  }\n  ngOnInit() {\n    // Inicializa o userForm dentro de ngOnInit para garantir que todos os serviços estejam disponíveis\n    this.initForm();\n    this.loadUserData();\n  }\n  initForm() {\n    this.userForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n      // Adicione mais controles conforme necessário\n    });\n  }\n\n  loadUserData() {\n    this.userId = this.route.snapshot.paramMap.get('id');\n    if (this.userId) {\n      this.userService.getUserById(this.userId).subscribe({\n        next: user => {\n          this.userForm.patchValue({\n            name: user.name,\n            email: user.email\n            // Preencha outros campos conforme necessário\n          });\n        },\n\n        error: error => console.error(error)\n      });\n    }\n  }\n  onSubmit() {\n    if (this.userForm.valid) {\n      const userData = this.userForm.value;\n      if (this.userId) {\n        this.userService.updateUser(this.userId, userData).subscribe({\n          next: () => this.router.navigate(['/users']),\n          error: error => console.error(error)\n        });\n      } else {\n        this.userService.createUser(userData).subscribe({\n          next: () => this.router.navigate(['/users']),\n          error: error => console.error(error)\n        });\n      }\n    }\n  }\n  static #_ = this.ɵfac = function EditComponent_Factory(t) {\n    return new (t || EditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditComponent,\n    selectors: [[\"app-edit\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"formControlName\", \"name\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"]],\n    template: function EditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, EditComponent_form_0_Template, 14, 5, \"form\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.userForm);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","EditComponent_form_0_Template_form_ngSubmit_0_listener","ɵɵrestoreView","_r5","ctx_r4","ɵɵnextContext","ɵɵresetView","onSubmit","ɵɵelement","ɵɵtemplate","EditComponent_form_0_mat_error_5_Template","EditComponent_form_0_mat_error_10_Template","EditComponent_form_0_mat_error_11_Template","ɵɵproperty","ctx_r0","userForm","ɵɵadvance","get","errors","invalid","EditComponent","constructor","fb","userService","route","router","userId","ngOnInit","initForm","loadUserData","group","name","required","email","snapshot","paramMap","getUserById","subscribe","next","user","patchValue","error","console","valid","userData","value","updateUser","navigate","createUser","_","ɵɵdirectiveInject","i1","FormBuilder","i2","UserService","i3","ActivatedRoute","Router","_2","selectors","decls","vars","consts","template","EditComponent_Template","rf","ctx","EditComponent_form_0_Template"],"sources":["/Users/jeff/Documents/GitHub/Amor_Saude/src/app/modules/user/components/edit/edit.component.ts","/Users/jeff/Documents/GitHub/Amor_Saude/src/app/modules/user/components/edit/edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../../services/user.service'; // Ajuste o caminho conforme necessário\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.scss']\n})\nexport class EditComponent implements OnInit {\n  userForm!: FormGroup; // Usando o operador de asserção não nula\n  userId: string | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    // Inicializa o userForm dentro de ngOnInit para garantir que todos os serviços estejam disponíveis\n    this.initForm();\n    this.loadUserData();\n  }\n\n  initForm(): void {\n    this.userForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      // Adicione mais controles conforme necessário\n    });\n  }\n\n  loadUserData(): void {\n    this.userId = this.route.snapshot.paramMap.get('id');\n    if (this.userId) {\n      this.userService.getUserById(this.userId).subscribe({\n        next: (user) => {\n          this.userForm.patchValue({\n            name: user.name,\n            email: user.email,\n            // Preencha outros campos conforme necessário\n          });\n        },\n        error: (error) => console.error(error)\n      });\n    }\n  }\n\n  onSubmit(): void {\n    if (this.userForm.valid) {\n      const userData = this.userForm.value;\n      if (this.userId) {\n        this.userService.updateUser(this.userId, userData).subscribe({\n          next: () => this.router.navigate(['/users']), // Ajuste a rota conforme necessário\n          error: (error) => console.error(error)\n        });\n      } else {\n        this.userService.createUser(userData).subscribe({\n          next: () => this.router.navigate(['/users']), // Ajuste a rota conforme necessário\n          error: (error) => console.error(error)\n        });\n      }\n    }\n  }\n}\n","<!-- edit.component.html -->\n<form [formGroup]=\"userForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"userForm\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Nome</mat-label>\n      <input matInput formControlName=\"name\">\n      <!-- Correção aplicada na verificação do erro de required -->\n      <mat-error *ngIf=\"userForm.get('name').errors?.['required']\">\n        O nome é obrigatório.\n      </mat-error>\n    </mat-form-field>\n  \n    <mat-form-field appearance=\"fill\">\n      <mat-label>E-mail</mat-label>\n      <input matInput formControlName=\"email\">\n      <!-- Correções aplicadas na verificação dos erros -->\n      <mat-error *ngIf=\"userForm.get('email').errors?.['required']\">\n        O e-mail é obrigatório.\n      </mat-error>\n      <mat-error *ngIf=\"userForm.get('email').errors?.['email']\">\n        Insira um e-mail válido.\n      </mat-error>\n    </mat-form-field>\n  \n    <!-- Adicione mais campos conforme necessário -->\n  \n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"userForm.invalid\">Salvar</button>\n</form>\n"],"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;ICK7DC,EAAA,CAAAC,cAAA,gBAA6D;IAC3DD,EAAA,CAAAE,MAAA,wCACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;;IAOZH,EAAA,CAAAC,cAAA,gBAA8D;IAC5DD,EAAA,CAAAE,MAAA,0CACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;;IACZH,EAAA,CAAAC,cAAA,gBAA2D;IACzDD,EAAA,CAAAE,MAAA,sCACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;;;IAnBlBH,EAAA,CAAAC,cAAA,cAAsE;IAAzCD,EAAA,CAAAI,UAAA,sBAAAC,uDAAA;MAAAL,EAAA,CAAAM,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAR,EAAA,CAAAS,aAAA;MAAA,OAAYT,EAAA,CAAAU,WAAA,CAAAF,MAAA,CAAAG,QAAA,EAAU;IAAA,EAAC;IAChDX,EAAA,CAAAC,cAAA,wBAAkC;IACrBD,EAAA,CAAAE,MAAA,WAAI;IAAAF,EAAA,CAAAG,YAAA,EAAY;IAC3BH,EAAA,CAAAY,SAAA,eAAuC;IAEvCZ,EAAA,CAAAa,UAAA,IAAAC,yCAAA,uBAEY;IACdd,EAAA,CAAAG,YAAA,EAAiB;IAEjBH,EAAA,CAAAC,cAAA,wBAAkC;IACrBD,EAAA,CAAAE,MAAA,aAAM;IAAAF,EAAA,CAAAG,YAAA,EAAY;IAC7BH,EAAA,CAAAY,SAAA,eAAwC;IAExCZ,EAAA,CAAAa,UAAA,KAAAE,0CAAA,uBAEY;IACZf,EAAA,CAAAa,UAAA,KAAAG,0CAAA,uBAEY;IACdhB,EAAA,CAAAG,YAAA,EAAiB;IAIjBH,EAAA,CAAAC,cAAA,iBAAsF;IAAAD,EAAA,CAAAE,MAAA,cAAM;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;IAxBnGH,EAAA,CAAAiB,UAAA,cAAAC,MAAA,CAAAC,QAAA,CAAsB;IAKVnB,EAAA,CAAAoB,SAAA,GAA+C;IAA/CpB,EAAA,CAAAiB,UAAA,SAAAC,MAAA,CAAAC,QAAA,CAAAE,GAAA,SAAAC,MAAA,kBAAAJ,MAAA,CAAAC,QAAA,CAAAE,GAAA,SAAAC,MAAA,aAA+C;IAS/CtB,EAAA,CAAAoB,SAAA,GAAgD;IAAhDpB,EAAA,CAAAiB,UAAA,SAAAC,MAAA,CAAAC,QAAA,CAAAE,GAAA,UAAAC,MAAA,kBAAAJ,MAAA,CAAAC,QAAA,CAAAE,GAAA,UAAAC,MAAA,aAAgD;IAGhDtB,EAAA,CAAAoB,SAAA,GAA6C;IAA7CpB,EAAA,CAAAiB,UAAA,SAAAC,MAAA,CAAAC,QAAA,CAAAE,GAAA,UAAAC,MAAA,kBAAAJ,MAAA,CAAAC,QAAA,CAAAE,GAAA,UAAAC,MAAA,UAA6C;IAOHtB,EAAA,CAAAoB,SAAA,GAA6B;IAA7BpB,EAAA,CAAAiB,UAAA,aAAAC,MAAA,CAAAC,QAAA,CAAAI,OAAA,CAA6B;;;ADfzF,OAAM,MAAOC,aAAa;EAIxBC,YACUC,EAAe,EACfC,WAAwB,EACxBC,KAAqB,EACrBC,MAAc;IAHd,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IANhB,KAAAC,MAAM,GAAkB,IAAI;EAOzB;EAEHC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAD,QAAQA,CAAA;IACN,IAAI,CAACb,QAAQ,GAAG,IAAI,CAACO,EAAE,CAACQ,KAAK,CAAC;MAC5BC,IAAI,EAAE,CAAC,EAAE,EAAEpC,UAAU,CAACqC,QAAQ,CAAC;MAC/BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACtC,UAAU,CAACqC,QAAQ,EAAErC,UAAU,CAACsC,KAAK,CAAC;MACnD;KACD,CAAC;EACJ;;EAEAJ,YAAYA,CAAA;IACV,IAAI,CAACH,MAAM,GAAG,IAAI,CAACF,KAAK,CAACU,QAAQ,CAACC,QAAQ,CAAClB,GAAG,CAAC,IAAI,CAAC;IACpD,IAAI,IAAI,CAACS,MAAM,EAAE;MACf,IAAI,CAACH,WAAW,CAACa,WAAW,CAAC,IAAI,CAACV,MAAM,CAAC,CAACW,SAAS,CAAC;QAClDC,IAAI,EAAGC,IAAI,IAAI;UACb,IAAI,CAACxB,QAAQ,CAACyB,UAAU,CAAC;YACvBT,IAAI,EAAEQ,IAAI,CAACR,IAAI;YACfE,KAAK,EAAEM,IAAI,CAACN;YACZ;WACD,CAAC;QACJ,CAAC;;QACDQ,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK;OACtC,CAAC;;EAEN;EAEAlC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACQ,QAAQ,CAAC4B,KAAK,EAAE;MACvB,MAAMC,QAAQ,GAAG,IAAI,CAAC7B,QAAQ,CAAC8B,KAAK;MACpC,IAAI,IAAI,CAACnB,MAAM,EAAE;QACf,IAAI,CAACH,WAAW,CAACuB,UAAU,CAAC,IAAI,CAACpB,MAAM,EAAEkB,QAAQ,CAAC,CAACP,SAAS,CAAC;UAC3DC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACb,MAAM,CAACsB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAC5CN,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK;SACtC,CAAC;OACH,MAAM;QACL,IAAI,CAAClB,WAAW,CAACyB,UAAU,CAACJ,QAAQ,CAAC,CAACP,SAAS,CAAC;UAC9CC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAACb,MAAM,CAACsB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAC5CN,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK;SACtC,CAAC;;;EAGR;EAAC,QAAAQ,CAAA,G;qBAxDU7B,aAAa,EAAAxB,EAAA,CAAAsD,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAxD,EAAA,CAAAsD,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAA1D,EAAA,CAAAsD,iBAAA,CAAAK,EAAA,CAAAC,cAAA,GAAA5D,EAAA,CAAAsD,iBAAA,CAAAK,EAAA,CAAAE,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAbtC,aAAa;IAAAuC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,uBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT1BrE,EAAA,CAAAa,UAAA,IAAA0D,6BAAA,mBAyBO;;;QAzB+CvE,EAAA,CAAAiB,UAAA,SAAAqD,GAAA,CAAAnD,QAAA,CAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}